{
  "package": {
    "main": [

    ],
    "optional": {

    }
  },


  "tests": [
    {
      "name": "Pytest",
      "description": "Unit testing",
      "version": "7.3.2",
      "install": {
        "pip": {"name": "pytest"},
        "conda": {"name": "pytest", "channel": "conda-forge"}
      },
      "urls": {
        "homepage": "https://pytest.org",
        "github": "https://github.com/pytest-dev/pytest",
        "docs": "https://docs.pytest.org/en/stable/reference/reference.html"
      }
    },
    {
      "name": "pytest-cov",
      "description": "Pytest plugin to generate coverage reports using the Coverage.py (https://github.com/nedbat/coveragepy) library.",
      "version": "4.1.0",
      "install": {
        "pip": {"name": "pytest-cov"},
        "conda": {"name": "pytest-cov", "channel": "conda-forge"}
      },
      "urls": {
        "homepage": "https://pytest-cov.readthedocs.io",
        "github": "https://github.com/pytest-dev/pytest-cov",
        "docs": "https://pytest-cov.readthedocs.io"
      }
    }
  ],


  "dev": [
    {
      "name": "Pylint",
      "description": "Static code analysis",
      "version": "2.17.4",
      "extra_requirements": "The spelling check is activated (pyproject.toml:tool.pylint.spelling). This needs the PyEnchant library, which is installed as optional dependency (by adding [spelling] to pip install). However, PyEnchant requires the Enchant C library and language dictionaries to work. On macOS, this can be done using homebrew: `brew install enchant`. On Linux, the `libenchant` package can be installed from apt: `sudo apt install -y libenchant-2-2`. For more options, see: https://pyenchant.github.io/pyenchant/install.html#installing-the-enchant-c-library",
      "pip": "pylint[spelling]",
      "conda": {"name": "pylint", "channel": "conda-forge"},
      "github": "https://github.com/pylint-dev/pylint",
      "homepage": "https://pylint.readthedocs.io",
      "docs": "https://pylint.readthedocs.io"
    },
    {
      "name": "pre-commit",
      "description": "Automatically managing pre-commit hooks",
      "version": "3.3.3",
      "pip": "pre-commit",
      "conda": {"name": "pre-commit", "channel": "conda-forge"},
      "github": "https://github.com/pre-commit/pre-commit",
      "homepage": "https://pre-commit.com",
      "docs": "https://pre-commit.com/#usage"
    },
    {
      "name": "mypy",
      "description": "Static type checking",
      "version": "1.3.0",
      "pip": "mypy[reports]",
      "conda": {"name": "mypy", "channel": "conda-forge"},
      "github": "https://github.com/python/mypy",
      "homepage": "https://mypy-lang.org",
      "docs": "https://mypy.readthedocs.io"
    },
    {
      "name": "Black",
      "description": "Code formatter",
      "version": "23.3.0",
      "pip": "black[jupyter]",
      "conda": {"name": "black", "channel": "conda-forge"},
      "github": "https://github.com/psf/black",
      "homepage": "https://black.readthedocs.io",
      "docs": "https://black.readthedocs.io"
    }
  ]
}
