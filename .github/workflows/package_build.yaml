# Generate a distribution package for PyPI.
# Publish the package on PyPI or TestPyPI.
# This reusable workflow uses the [pypi-publish](https://github.com/pypa/gh-action-pypi-publish) GitHub Action
# to publish the distribution package on either PyPI or TestPyPI, depending on the input.


name: 'Package: Build'
run-name: 'Package: Build from ${{github.ref}}'


on:
  workflow_dispatch:
  workflow_call:

    inputs:

      repository:
        description: |
          Repository to checkout, i.e. the `repository` input of `actions/checkout`.
          This is only required when the workflow is called from another workflow.
        type: string
        default: ${{ github.repository }}
        required: false

      checkout-ref:
        type: string
        default: ''
        required: false
        description: |
          Reference (i.e. branch, tag or SHA) of the current repository to checkout,
          i.e. the `ref` input of `actions/checkout`.

    outputs:

      name:
        description: Name of the package.
        value: ${{jobs.build-sdist.outputs.package-name}}

      version:
        description: Version of the package.
        value: ${{jobs.build-sdist.outputs.package-version}}


jobs:

  meta:
    name: Initialize
    outputs:
      data: ${{steps.meta.outputs.metadata}}
    runs-on: ubuntu-latest
    steps:
#      - name: 'Display inputs'
#        run: |
#          echo 'install-source: ${{inputs.package-source}}'
#          echo 'install-version: ${{inputs.package-version}}'
#          echo 'checkout-ref: ${{inputs.checkout-ref}}'

      - name: Checkout Metadata
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.checkout-ref }}
          sparse-checkout: meta/.out/metadata.json
          sparse-checkout-cone-mode: false

      - name: 'Load repository metadata'
        id: meta
        run: echo "metadata=$(cat meta/.out/metadata.json)" >> $GITHUB_OUTPUT


  build-sdist:
    name: 'Source Distribution'
    outputs:
      package-name: ${{steps.get_name.outputs.package-name}}
      package-version: ${{steps.get_name.outputs.package-version}}
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout Repository'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.checkout-ref }}
          fetch-depth: 0

      - name: 'Build sdist'
        shell: bash
        run: |
          pipx run build --version
          pipx run build --sdist --outdir dist

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*

      - name: 'Upload sdist as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.tar.gz
          name: Distribution Package

      - uses: actions/setup-python@v4
        with:
          python-version: '3.x'
          cache: 'pip'
          cache-dependency-path: .local/repodynamics/requirements.txt
      - shell: bash
        run: |
          # Install RepoDynamics
          echo "::group::Install Dependencies"
          python -m pip install repodynamics
          echo "::endgroup::"
          echo "::group::Display pip environment"
          python -m pip list
          echo "::endgroup::"

      - name: 'Run script'
        id: get_name
        env:
          RD_PYBUILD__PATH_DIST: dist
        run: python -m repodynamics.actions pybuild build

#      - name: 'Checkout workflow script'
#        uses: actions/checkout@v3
#        with:
#          ref: "main"
#          sparse-checkout: .github/script/workflow.py
#          sparse-checkout-cone-mode: false
#
#      - name: 'Output and summary'
#        id: output
#        run: python .github/script/workflow.py


  build-wheel:
    name: 'Binary Distribution'
    needs: meta
    if: fromJSON(needs.meta.outputs.data).package.pure_python == true
    runs-on: ubuntu-latest
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel'
        run: |
          pipx run build --version
          pipx run build --wheel --outdir dist/

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: dist/*.whl
          name: Distribution Package

      - name: 'Test README file'
        # https://twine.readthedocs.io/en/stable/#twine-check
        # https://packaging.python.org/en/latest/guides/making-a-pypi-friendly-readme/#validating-restructuredtext-markup
        run: pipx run twine check dist/*


  build-wheels:
    name: 'Generate native built distribution on ${{ matrix.os }}'
    needs: meta
    if: fromJSON(needs.meta.outputs.data).package.pure_python == false
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(needs.meta.outputs.data).package.cibw_matrix_platform }}
        py-ver: ${{ fromJson(needs.meta.outputs.data).package.cibw_matrix_python }}
    steps:

      - name: 'Checkout repository from ${{github.ref}}'
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.repository }}
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Build wheel on ${{ matrix.os }}'
        # https://cibuildwheel.readthedocs.io/en/stable/
        # https://github.com/pypa/cibuildwheel
        uses: pypa/cibuildwheel@v2.13.1
        with:
          output-dir: dist
        env:
          CIBW_BUILD: ${{ matrix.py-ver }}-${{ matrix.platform.cibw_platform }}
          CIBW_BUILD_VERBOSITY: 2

      - name: 'Upload wheel as artifact'
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl
          name: Distribution Package
