# Run static code analysis

name: Lint
run-name: Test lint

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      checkout-ref:
        description: 'Reference to checkout, i.e. the `ref` input of `actions/checkout`.'
        type: string
        required: false
        default: ""
      base-ref:
        description: 'Base reference.'
        type: string
        required: false
        default: ""
      head-ref:
        description: 'Head reference.'
        type: string
        required: false
        default: ""

defaults:
  run:
    shell: bash

jobs:

  meta:
    name: 'Load Metadata'
    outputs:
      data: ${{steps.metadata.outputs.json}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.checkout-ref }}
          sparse-checkout: meta/.out/metadata.json
          sparse-checkout-cone-mode: false
      - id: metadata
        run: echo "json=$(cat meta/.out/metadata.json)" >> $GITHUB_OUTPUT

  dependency-review:
  # This Action will scan dependency manifest files that change as part of a Pull Request,
  # surfacing known-vulnerable versions of the packages declared or updated in the PR.
  # Once installed, if the workflow run is marked as required,
  # PRs introducing known-vulnerable packages will be blocked from merging
    name: 'Dependency Review'
    if: contains(fromJSON('["push", "pull_request"]'), github.event_name)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v3

      - name: 'Review dependencies'
        # Source repository: https://github.com/actions/dependency-review-action
        # Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement
        # https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/configuring-dependency-review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: low
          fail-on-scopes: development, runtime, unknown
          comment-summary-in-pr: true
          base-ref: ${{ inputs.base-ref }}
          head-ref: ${{ inputs.head-ref }}


  CodeQL:
    # Run code scanning with GitHub CodeQL.
    # Adapted from GitHub starter workflow, e.g.:
    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fcodeql.yml&workflow_template=code-scanning%2Fcodeql
    # Refs:
    #  https://github.com/github/codeql-action
    #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning-for-a-repository
    name: 'Scan code with CodeQL'
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      # required for all workflows
      security-events: write
      # only required for workflows in private repositories
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: ['python']
        # Available languages: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift'
        # CodeQL language support: https://aka.ms/codeql-docs/language-support
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Initialize CodeQL'
        # Initializes the CodeQL tools for scanning.
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          # queries: security-extended,security-and-quality
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.
          # For more details on CodeQL's query packs, refer to:
          #  https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs

      - name: Autobuild
        # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
        # If this step fails, then you should remove it and run the build manually instead.
        uses: github/codeql-action/autobuild@v2

      - name: 'Perform CodeQL Analysis'
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"


#  bandit:
#    # Bandit is a security linter designed to find common security issues in Python code.
#    # This action will run Bandit on your codebase.
#    # The results of the scan will be found under the Security tab of your repository.
#    # Adapted from GitHub starter workflow, e.g.:
#    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fbandit.yml&workflow_template=code-scanning%2Fbandit
#    # Refs:
#    #  https://github.com/marketplace/actions/bandit-scan
#    #  https://pypi.org/project/bandit/
#    name: 'Run bandit'
#    permissions:
#      contents: read # for actions/checkout to fetch code
#      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
#      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
#    runs-on: ubuntu-latest
#    steps:
#      - name: 'Checkout repository'
#        uses: actions/checkout@v3
#        with:
#          ref: ${{ inputs.checkout-ref }}
#
#      - name: 'Bandit Scan'
#        uses: shundor/python-bandit-scan@v1.0
#        with:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needed to get PR information.
#          path: .


#  pyre:
#    # Pyre is a performant type checker for Python compliant with
#    # PEP 484. Pyre can analyze codebases with millions of lines
#    # of code incrementally â€“ providing instantaneous feedback
#    # to developers as they write code.
#
#    # Adapted from GitHub starter workflow, e.g.:
#    #  https://github.com/Armin-Ariamajd/PyPACKIT/new/main?filename=.github%2Fworkflows%2Fpyre.yml&workflow_template=code-scanning%2Fpyre
#    # Refs:
#    #  https://github.com/facebook/pyre-action
#    #  https://pyre-check.org
#    name: 'Run Pyre'
#    permissions:
#      actions: read
#      contents: read
#      security-events: write
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#        with:
#          submodules: true
#          ref: ${{ inputs.checkout-ref }}
#
#      - name: Run Pyre
#        uses: facebook/pyre-action@v0.0.1
#        with:
#          repo-directory: './'
#          requirements-path: 'requirements.txt'


  mypy:
    name: 'mypy (${{ matrix.os }}, python ${{ matrix.python-version }})'
    needs: meta
    if: ${{ always() }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.meta.outputs.data).package.github_runners }}
        python-version: ${{ fromJSON(needs.meta.outputs.data).package.python_versions }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Install requirements'
        run: |
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install mypy[reports]

      - name: 'Run mypy'
        run: |
          mkdir -p _local_reports/mypy
          mypy ./src --config-file pyproject.toml

      - name: 'Move reports'
        if: always()
        run: |
          mkdir -p artifacts/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv _local_reports/mypy/* artifacts/mypy/python_${{ matrix.python-version }}/${{ matrix.os }}

      - name: 'Display info'
        if: always()
        run: |
          echo "::group::Python version"
          python -c "import sys; print(sys.version)"
          echo "::endgroup::"
          echo "::group::mypy Version"
          mypy --version
          echo "::endgroup::"
          echo "::group::pip list"
          python -m pip list
          echo "::endgroup::"
          echo "::group::OS and hardware info"
          uname -a
          echo "::endgroup::"
          echo "::group::Disk space usage"
          df -h
          echo "::endgroup::"
          echo "::group::Available system resources"
          ulimit -a
          echo "::endgroup::"
          echo "::group::Root directory"
          ls -a
          echo "::endgroup::"
          echo "::group::File tree"
          find .
          echo "::endgroup::"

      - name: 'Upload reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: artifacts
          name: lint


  pylint:
    name: 'Pylint'
    needs: meta
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(needs.meta.outputs.data).package.github_runners }}
        python-version: ${{ fromJSON(needs.meta.outputs.data).package.python_versions }}

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ inputs.checkout-ref }}

      - name: 'Setup Python ${{ matrix.python-version }}'
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: 'Setup MSYS2'
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-enchant

      - name: 'Install requirements'
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt update
              sudo apt install -y libenchant-2-2
              sudo apt install -y graphviz
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "Requirement already satisfied."
          elif [ "$RUNNER_OS" == "macOS" ]; then
              brew update-reset
              brew install enchant
          else
              echo "$RUNNER_OS not supported"
              exit 1
          fi
          python -m pip install --upgrade pip
          python -m pip install .
          python -m pip install pylint[spelling]


      - name: 'Run Pylint'
        run: |
          mkdir -p .local/reports/pylint/diagrams
          pylint ./src --rcfile pyproject.toml

      - name: 'Create diagrams'
        # https://pylint.readthedocs.io/en/latest/pyreverse.html
        if: always()
        run: |
          pyreverse ${{ fromJSON(needs.meta.outputs.data).package.name }} --output-directory .local/reports/pylint/diagrams --output html --module-names y --colorized

      - name: 'Move reports'
        if: always()
        run: |
          mkdir -p .local/artifacts/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}
          mv .local/reports/pylint/* .local/artifacts/pylint/python_${{ matrix.python-version }}/${{ matrix.os }}

      - name: 'Display info'
        if: always()
        run: |
          echo "::group::Python version"
          python -c "import sys; print(sys.version)"
          echo "::endgroup::"
          echo "::group::Pylint Version"
          pylint --version
          echo "::endgroup::"
          echo "::group::pip list"
          python -m pip list
          echo "::endgroup::"
          echo "::group::OS and hardware info"
          uname -a
          echo "::endgroup::"
          echo "::group::Disk space usage"
          df -h
          echo "::endgroup::"
          echo "::group::Available system resources"
          ulimit -a
          echo "::endgroup::"
          echo "::group::Root directory"
          ls -a
          echo "::endgroup::"
          echo "::group::File tree"
          find .
          echo "::endgroup::"

      - name: 'Upload Pylint reports'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: .local/artifacts
          name: lint

#      - name: 'Upload diagrams'
#        if: always()
#        uses: actions/upload-artifact@v3
#        with:
#          path: |
#            _local_reports/pylint/diagrams/*
#          name: diagrams_${{ matrix.python-version }}_${{ matrix.os }}
