# Continuous Integration pipeline


name: "[On Pull]: CI/CD"
run-name: |
  CI/CD: PR #${{github.event.pull_request.number}}: ${{github.event.pull_request.title}}


on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize


jobs:

  init:
    name: 'Initialization'
    runs-on: ubuntu-latest
    outputs:
      run-package-ci: ${{ steps.init.outputs.run_package_ci }}
      run-docs-ci: ${{ steps.init.outputs.run_docs_ci }}
    steps:
      - uses: repodynamics/init@main
        id: init

#  docs:
#    name: 'Docs'
#    needs: init
#    if: needs.init.outputs.run-docs-ci == 'true'
#    runs-on: ubuntu-latest
#    steps:
#      - uses: RepoDynamics/SphinxDocs@main
#
#  package-test:
#    name: 'Test Package'
#    needs: init
#    if: needs.init.outputs.run-package-ci == 'true'
#    uses: ./.github/workflows/package_test.yaml
#    with:
#      package-source: GitHub
#
#  package-lint:
#    name: 'Lint Package'
#    needs: init
#    if: needs.init.outputs.run-package-ci == 'true'
#    permissions:
#      pull-requests: write
#      security-events: write
#      # only required for workflows in private repositories
#      actions: read
#      contents: read
#    uses: ./.github/workflows/package_lint.yaml
#
#  package-build:
#    name: 'Package / Publish'
#    needs: [init, package-test, package-lint]
#    if: needs.init.outputs.publish-package == 'true'
#    uses: ./.github/workflows/package_build.yaml
#    with:
#      repository: ${{ github.event.pull_request.head.repo.full_name }}
#      checkout-ref: ${{ github.event.pull_request.head.sha }}
#      publish-platform: 'TestPyPI'
#
#  package-publish:
#    needs: package-build
#    permissions:
#      id-token: write
#    uses: ./.github/workflows/package_publish.yaml
#
#  test-testpypi:
#    name: 'Test Published Package'
#    needs: [package-build, package-publish]
#    uses: ./.github/workflows/package_test.yaml
#    with:
#      repository: ${{ github.event.pull_request.head.repo.full_name }}
#      checkout-ref: ${{ github.event.pull_request.head.sha }}
#      package-source: TestPyPI
#      package-version: ${{ needs.package-build.outputs.package-version }}
